name: Run Tests
description: Run unit tests
inputs:
  tool4d_executable_path:
    required: true
    type: string
  project_path:
    required: true
    type: string    
  startup_method: 
    required: false
    type: string
  user_param: 
    required: false
    type: string  
  data: 
    required: false
    type: string      
  skip_onstartup: 
    required: false
    type: boolean  
  create_data: 
    required: false
    type: boolean
  dataless: 
    dataless: false
    type: boolean
  utility: 
    utility: false
    type: boolean    
outputs:
  stdout: 
    value: ${{ steps.test.outputs.stdout }}
  stderr: 
    value: ${{ steps.test.outputs.stderr }}  

runs:
  using: "composite"
  steps:

  - name: setup
    id: setup
    run: |
      if [ "${startup_method}" != '' ]; then
      startup_method="${startup_method}"
      fi
      if [ "${skip_onstartup}" = 'true' ]; then
      skip_onstartup="--skip-onstartup"
      else
      skip_onstartup=""
      fi
      if [ "${create_data}" = 'true' ]; then
      create_data="--create-data"
      else
      create_data=""
      fi  
      if [ "${dataless}" = 'true' ]; then
      dataless="--dataless"
      else
      dataless=""
      fi
      if [ "${utility}" = 'true' ]; then
      utility="--utility"
      else
      utility=""
      fi      
      if [ "${user_param}" != '' ]; then
      user_param="${user_param}"
      fi      
      if [ "${data}" != '' ]; then
      data="${data}"
      fi      
      echo "startup_method=${startup_method}" >> $GITHUB_OUTPUT
      echo "skip_onstartup=${skip_onstartup}" >> $GITHUB_OUTPUT
      echo "create_data=${create_data}" >> $GITHUB_OUTPUT
      echo "dataless=${dataless}" >> $GITHUB_OUTPUT
      echo "utility=${utility}" >> $GITHUB_OUTPUT
      echo "user_param=${user_param}" >> $GITHUB_OUTPUT
      echo "data=${data}" >> $GITHUB_OUTPUT
    shell: bash  
    env:
      startup_method: ${{ inputs.startup_method }}
      skip_onstartup: ${{ inputs.skip_onstartup }}
      create_data: ${{ inputs.create_data }}
      dataless: ${{ inputs.dataless }}

  - name: powershell
    id: powershell
    if: ${{ runner.os == 'windows' }}
    run: |
      chcp 65001 
      $tool4d_executable_path=Join-Path -Path "$PWD" -ChildPath "$env:tool4d_executable_path"
      $project_path=Join-Path -Path "$PWD" -ChildPath "$env:project_path"
      $data=Join-Path -Path "$PWD" -ChildPath "$env:data"
      echo ("tool4d_executable_path="+$tool4d_executable_path) >> $env:GITHUB_OUTPUT 
      echo ("project_path="+$project_path) >> $env:GITHUB_OUTPUT  
      echo ("data="+$data) >> $env:GITHUB_OUTPUT  
    env:
      tool4d_executable_path: ${{ inputs.tool4d_executable_path }}
      project_path: ${{ inputs.project_path }} 
      data: ${{ steps.setup.outputs.data }}
    shell: powershell

  - name: mac
    id: mac
    if: ${{ runner.os == 'macos' }}
    run: |
      if [ "${create_data}" != '' ]; then
      "${tool4d_executable_path}" "${project_path}" --create-data    --startup-method="${startup_method}" "${skip_onstartup}" "${utility}" --user-param="${user_param}"
      elif  [ "${dataless}" != '' ]; then
      "${tool4d_executable_path}" "${project_path}" --dataless       --startup-method="${startup_method}" "${skip_onstartup}" "${utility}" --user-param="${user_param}"   
      elif [ "${data}" != '' ]; then
      "${tool4d_executable_path}" "${project_path}" --data="${data}" --startup-method="${startup_method}" "${skip_onstartup}" "${utility}" --user-param="${user_param}"         
      fi
    shell: bash -c "bash -e {0} 2>stderr.log"
    env:
      tool4d_executable_path: ${{ inputs.tool4d_executable_path }}
      project_path: ${{ inputs.project_path }}        
      startup_method: ${{ steps.setup.outputs.startup_method }}
      skip_onstartup: ${{ steps.setup.outputs.skip_onstartup }}
      create_data: ${{ steps.setup.outputs.create_data }}
      dataless: ${{ steps.setup.outputs.dataless }}
      utility: ${{ steps.setup.outputs.utility }}
      user_param: ${{ steps.setup.outputs.user_param }}
      data: ${{ steps.setup.outputs.data }}
      
  - name: win
    id: win
    if: ${{ runner.os == 'windows' }}
    run: |
      if("$env:create_data" -ne ""){
      & "$env:tool4d_executable_path" "$env:project_path" --create-data      --startup-method="$env:startup_method" "$env:skip_onstartup" "$env:utility" --user-param="$env:user_param"
      }elseif("$env:dataless" -ne ""){
      & "$env:tool4d_executable_path" "$env:project_path" --dataless         --startup-method="$env:startup_method" "$env:skip_onstartup" "$env:utility" --user-param="$env:user_param"      
      }elseif("$env:data" -ne ""){
      & "$env:tool4d_executable_path" "$env:project_path" --data="$env:data" --startup-method="$env:startup_method" "$env:skip_onstartup" "$env:utility" --user-param="$env:user_param"
      }
    shell: powershell . '{0}' 2>stderr.log
    env:
      tool4d_executable_path: ${{ steps.powershell.outputs.tool4d_executable_path }}
      project_path: ${{ steps.powershell.outputs.project_path }}        
      data: ${{ steps.powershell.outputs.data }}   
      startup_method: ${{ steps.setup.outputs.startup_method }}
      skip_onstartup: ${{ steps.setup.outputs.skip_onstartup }}
      create_data: ${{ steps.setup.outputs.create_data }}
      dataless: ${{ steps.setup.outputs.dataless }}
      utility: ${{ steps.setup.outputs.utility }}
      user_param: ${{ steps.setup.outputs.user_param }}

  - name: test
    id: test     
    run: |
      ls .
      echo "stderr=`cat stderr.log`" >> $GITHUB_OUTPUT
    shell: bash 
    env:
      windows_tool4d_executable_path: ${{steps.win.outputs.windows_tool4d_executable_path }}
      windows_project_path: ${{steps.win.outputs.windows_project_path }}
