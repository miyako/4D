name: Run Tests
description: Run unit tests
inputs:
  tool4d_executable_path:
    required: true
    type: string
  project_path:
    required: true
    type: string    
  startup_method: 
    required: false
    type: string
  user_param: 
    required: false
    type: string  
  data: 
    required: false
    type: string      
  skip_onstartup: 
    required: false
    type: boolean  
  create_data: 
    required: false
    type: boolean
  dataless: 
    dataless: false
    type: boolean
  utility: 
    utility: false
    type: boolean    
outputs:
  stdout: 
    value: ${{ steps.test.outputs.stdout }}
  stderr: 
    value: ${{ steps.test.outputs.stderr }}  

runs:
  using: "composite"
  steps:

  - name: setup
    id: setup
    run: |
      if [ "${startup_method}" != '' ]; then
      startup_method="${startup_method}"
      fi
      if [ "${skip_onstartup}" = 'true' ]; then
      skip_onstartup="--skip-onstartup"
      fi
      if [ "${create_data}" = 'true' ]; then
      create_data="--create-data"
      fi  
      if [ "${dataless}" = 'true' ]; then
      dataless="--dataless"
      fi
      if [ "${utility}" = 'true' ]; then
      utility="--utility"
      fi      
      if [ "${user_param}" != '' ]; then
      user_param="${user_param}"
      fi      
      if [ "${data}" != '' ]; then
      data="${data}"
      fi      
      echo "startup_method=${startup_method}" >> $GITHUB_OUTPUT
      echo "skip_onstartup=${skip_onstartup}" >> $GITHUB_OUTPUT
      echo "create_data=${create_data}" >> $GITHUB_OUTPUT
      echo "dataless=${dataless}" >> $GITHUB_OUTPUT
      echo "utility=${utility}" >> $GITHUB_OUTPUT
      echo "user_param=${user_param}" >> $GITHUB_OUTPUT
      echo "data=${data}" >> $GITHUB_OUTPUT
    shell: bash  
    env:
      startup_method: ${{ inputs.startup_method }}
      skip_onstartup: ${{ inputs.skip_onstartup }}
      create_data: ${{ inputs.create_data }}
      dataless: ${{ inputs.dataless }}

  - name: mac
    id: mac
    if: ${{ runner.os == 'macos' }}
    run: |
      "${TOOL4D_EXECUTABLE_PATH}" "${project_path}" --startup-method="${startup_method}" "${skip_onstartup}" "${create_data}" "${dataless}" "${utility}" --user-param="${user_param}" --data="${data}"
      echo "stderr=`cat stderr.log`" >> $GITHUB_OUTPUT
    shell: bash -c "bash -e {0} 2>stderr.log"
    env:
      tool4d_executable_path: ${{ inputs.tool4d_executable_path }}
      project_path: ${{ inputs.project_path }}        
      startup_method: ${{ steps.setup.outputs.startup_method }}
      skip_onstartup: ${{ steps.setup.outputs.skip_onstartup }}
      create_data: ${{ steps.setup.outputs.create_data }}
      dataless: ${{ steps.setup.outputs.dataless }}
      utility: ${{ steps.setup.outputs.utility }}
      user_param: ${{ steps.setup.outputs.user_param }}
      data: ${{ steps.setup.outputs.data }}
      
  - name: win
    id: win
    if: ${{ runner.os == 'windows' }}
    run: |
      `"${TOOL4D_EXECUTABLE_PATH}" "${project_path}" ${tool4d_arguments}`
      echo "stderr=`cat stderr.log`" >> $GITHUB_OUTPUT
    shell: powershell -command "powershell . '{0}' 2>stderr.log" 
    env:
      tool4d_executable_path: ${{ inputs.tool4d_executable_path }}
      tool4d_arguments: ${{ steps.setup.outputs.tool4d_arguments }}
      project_path: ${{ inputs.project_path }}     

  - name: test
    id: test     
    run: |
      echo "stdout=${stdout}" >> $GITHUB_OUTPUT
      echo "stderr=${stderr}" >> $GITHUB_OUTPUT
    shell: bash
    env:
      stdout: ${{ steps.mac.outputs.stdout }}  
      stderr: ${{ steps.mac.outputs.stderr }}     
